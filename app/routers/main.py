from flask import Blueprint, request, redirect, jsonify

from app.db import Messages, SystemMessages
from app.db.crud import UserApp, create_task
from app.utils import AssemMessage
from app.utils.assemai import AssemAI
from app.utils.search import create_semantic_response
from app.utils.task_system import add_task

main_bp = Blueprint('main_bp', __name__)

@main_bp.route('/webhook/whatsapp', methods=['POST'])
def webhook_whatsapp():
    try:
        post_data = request.get_json()
        if not post_data or 'messages' not in post_data:
            return jsonify({'status': False, 'error': 'Invalid payload'}), 400

        data = post_data['messages'][0]
        phone = data.get('from')
        chat_id = data.get('chat_id')

        if not phone or not chat_id:
            return jsonify({'status': False, 'error': 'Phone or Chat ID missing'}), 400

        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = UserApp(phone=phone, chat_id=chat_id)
        create_user_result = user.create_user()
        message = AssemMessage()
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if 'text' in data:
            message_body = data['text'].get('body')
            if message_body:
                message = Messages(
                    user_id=user.id,
                    role='user',
                    content=message_body,
                    tool_call_id=None,
                    tokens=None
                )
                message.save_to_db()
                add_task(chat_id)
                return jsonify({'status': True, 'data': 'Thanks guys! We take that!'})
        elif 'image' in data:
            ans = ('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –ø–æ–∫–∞ –Ω–µ —É–º–µ—é —á–∏—Ç–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫. '
                   '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–æ–≤–∞–º–∏, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–º–æ–≥—É –≤–∞–º! üòä')
            response = message.send_text(ans, chat_id)
        elif 'voice' in data:
            ans = ('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ü–æ–∫–∞ —è –Ω–µ –º–æ–≥—É —Å–ª—É—à–∞—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã, –Ω–æ –±—É–¥—É —Ä–∞–¥, '
                   '–µ—Å–ª–∏ –≤—ã –Ω–∞–ø–∏—à–µ—Ç–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ —Ç–µ–∫—Å—Ç–æ–º. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –ª—É—á—à–µ –≤–∞–º –ø–æ–º–æ—á—å! ')
            response = message.send_text(ans, chat_id)
        else:
            ans = (
                '–Ø –Ω–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–º, —á—Ç–æ–±—ã –º—ã –ø—Ä–æ–¥–æ–ª–∂–∏–ª–∏ –æ–±—â–µ–Ω–∏–µ. '
                '–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å! ')
            response = message.send_text(ans, chat_id)

        return jsonify({'status': True, 'data': 'Thanks guys! We take that!', 'a': ans})

    except Exception as e:
        return jsonify({'status': False, 'error': str(e)}), 500


@main_bp.route('/check/user', methods=['POST'])
def check_user():
    user = UserApp(user_id=11)
    user.upgrade_user()
    data = user.get_chat()

    message = AssemMessage()
    response = message.send_text("Hello, world!", "77761174378@s.whatsapp.net")
    print(response)


    return data

@main_bp.route('/create/system/', methods=['POST'])
def create_system():
    data = request.form['content']
    prompt = create_semantic_response(query=data)

    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–æ–º–ø—Ç–∞ –≤ GPT mini
    print(prompt)
    return {'ans': prompt}

@main_bp.route('/messages/ai', methods=['POST'])
def chat_with_ai():
    """
    –ú—ã –ø–æ–ª—É—á–∞–µ–º Whapi webhook, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–∞ –±–∞–∑–µ, –≤–µ—Ä–Ω–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–µ–±—Ö—É–∫ –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    –ö–∞–∂–¥—ã–π 2 –º–∏–Ω—É—Ç—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∑–∞–¥–∞—á –∏ –æ—Ç–≤–µ—á–∞–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    –£–∂–µ –≥–æ—Ç–æ–≤–∞ –ø—Ä–∏–µ–º –≤–µ–±—Ö—É–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã. –ê —Ç–∞–∫ –∂–µ –≥–æ—Ç–≤–∞ –∫–ª–∞—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Whapi

    –û—Å—Ç–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :return:
    """
    content = request.form['content']
    role = 'user'
    user_id = 12

    ai = Messages(
        user_id=user_id,
        role=role,
        content=content
    )
    ai.save_to_db()
    client = AssemAI(userid=user_id)
    answer = client.generate_answer()

    return {"Status": True, 'answer': answer}